{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Compile new model": {
		"prefix": "tf-compile",
		"body": [
			"model.compile(optimizer='rmsprop',loss=None,metrics=None)"
		],
		"description": "This compiles model"
	},
	"Fit my model": {
		"prefix": "tf-fit",
		"body": [
			"model.fit(train_dataset, batch_size=None,epochs=1,verbose=1,validation_data=None,steps_per_epoch=None)"
		],
		"description": "This compiles model"
	},
	"Get data function": {
		"prefix": "tf-getdata",
		"body": [
			"def get_data(**kwargs):",
			"	imgs =",
			"	labels = ",
			"	tensor = tf.data.Dataset.from_tensor_slices((imgs, labels))",
			"	tensor = tensor.cache()",
			"	if kwargs['repeat']:",
			"		tensor = tensor.repeat()",
			"	if kwargs['shuffle']:",
			"		tensor = tensor.shuffle(1024 * REPLICAS)",
			"		opt = tf.data.Options()",
			"		opt.experimental_deterministic = False",
			"		tensor = tensor.with_options(opt)",
			"	tensor = tensor.map(get_train_imgs, num_parallel_calls = AUTO)",
			"	if kwargs['batch']:",
			"		tensor = tensor.batch(kwargs['batch_size'] * REPLICAS)",
			"	if kwargs['prefetch']:",
			"		tensor = tensor.prefetch(AUTO)",
			"	return tensor"
		],
		"description": "This is get data function which helps to make data generator model."
	},
	"Print image dataset function": {
		"prefix": "tf-printdata",
		"body": [
			"def show_dataset_with_mask(thumb_size, cols, rows, ds):",
			"	mosaic = PIL.Image.new(mode='RGB', size=(thumb_size*cols + (cols-1), thumb_size*rows + (rows-1)))",
			"	mosaic1 = PIL.Image.new(mode='RGB', size=(thumb_size*cols + (cols-1), thumb_size*rows + (rows-1)))",
			"	for idx, data in enumerate(iter(ds)):",
			"		try:",
			"			img, mask = data",
			"		except:",
			"			img = data",
			"		ix  = idx % cols",
			"		iy  = idx // cols",
			"		img = np.clip(img.numpy() * 255, 0, 255).astype(np.uint8)",
			"		img = PIL.Image.fromarray(img)",
			"		img = img.resize((thumb_size, thumb_size), resample=PIL.Image.BILINEAR)",
			"		mosaic.paste(img, (ix*thumb_size + ix, iy*thumb_size + iy))",
		    "	display(mosaic)"
		],
		"description": "This function print data function."
	},
	"Import basic libraries": {
		"prefix": "tf-imports",
		"body": [
			"import pandas as pd",
			"import numpy as np",
			"import tensorflow as tf",
			"import seaborn as sns",
			"import matplotlib.pyplot as plt",
			"from tqmd import tqdm",
			"from tensorflow import keras",
			"import sys",
			"import PIL",
			"import os",
			"import tensorflow.keras.backend as K"
		],
		"description": "It imports most of important libraries."
	},
}